* missing features
** TODO rich status bar information
   - progress bar for long operations (search, parse, ...)
   - insert / overwrite mode,  read-write / read-only, charset,
   - file length / selection length / cursor position
   - value at cursor in dec / hex / bin
   - ...
** TODO better search dialog
   - ascii / hex / numbers / number ranges / regex
   - "find all" option
   - select matching range
   - replace option
   - maybe include hexview widget for search term input?
** TODO copy as...
   - ascii / hex / c / python ...
   - also paste as?
** TODO calculate checksum / decrypt / encrypt / transform
   - uuencode / base64 / rot13 / xor
** TODO diff files and regions
   - beyondcompare-like context menu: "select left side to compare"...
** TODO scripting
   - with ipython integration
** TODO file explorer
** TODO disassembler
   - see pure python disassemblers from vivisect
   - also include assembler?
   - maybe even search / replace for asm?
** TODO regex builder?
** TODO bookmarks / favourites
** TODO tabbed interface for multiple open files
** TODO open disk / process
** TODO import / export
   - intel hex (with sparse support)
   - ...
** TODO undo stack
** TODO rectangle selection mode?
** TODO bitmap view
** TODO Jump to address for values that are also valid 32bit addresses
** TODO multiple views for same file
** TODO view as hex/oct/dec/bin?
** TODO tag selection as in wxHexEditor
* user interface
** selection
** display
   - make everything configurable
     - font
     - address view (hex / dec / oct / off, length, ...)
     - data view (hex / dec / oct / bin, grouping, separator lines, bytes per line, ...)
     - ascii view (
** motion
   - tab to switch bewteen ascii and hex view?
   - goto dock
* for histogram
#+BEGIN_SRC python
import numpy
# data is an mmap object
array = numpy.ndarray.__new__(numpy.ndarray,
                              shape=(len(data),),
                              dtype=numpy.uint8,
                              buffer=data,
                              offset=0,
                              strides=(1,),
                              order='C')
hist(array, bins=256, range=(0,256))
#+END_SRC
* entropy
#+BEGIN_SRC python
import math

entropy = 0

for count in byte_counts:
    # If no bytes of this value were seen in the value, it doesn't affect
    # the entropy of the file.
    if count == 0:
        continue
    # p is the probability of seeing this byte in the file, as a floating-
    # point number
    p = 1.0 * count / total
    entropy -= p * math.log(p, 2
)
#+END_SRC
